###### shadowWhite
# Unity Addressables: A Guide

## Introduction

Unity's Addressable Asset System is a powerful tool for managing and loading assets efficiently. It allows developers to easily reference assets, load them asynchronously, and handle content that might change or grow over time. Whether you're working on a mobile game or a large-scale project, Addressables simplify asset management and improve loading performance.

In this guide, we'll cover the basics of Addressables, why they are useful, and how you can implement them in your Unity projects.

---

## Why Use Addressables?

### 1. **Efficient Memory Management**
   Unity’s Addressables help in managing memory usage by loading and unloading assets dynamically, instead of having everything preloaded in memory at once.

### 2. **Asynchronous Loading**
   Addressables allow assets to be loaded in the background, preventing your game from freezing or stuttering while loading large files like textures or models.

### 3. **Remote Content**
   With Addressables, you can host assets on a remote server and download them as needed. This is particularly useful for reducing initial app size and enabling content updates without pushing full patches.

### 4. **Dynamic Content Updates**
   You can update your game’s content, such as levels, skins, or soundtracks, without needing to rebuild and redeploy the entire game.

---

## How Addressables Work

Addressables rely on **labels** and **keys** to reference assets, rather than using hard-coded references. This provides greater flexibility in asset management. Here’s a breakdown of the workflow:

1. **Mark Assets as Addressable:**
   Assets such as textures, prefabs, or audio files are marked as "Addressable" in the Unity Editor, giving them a unique address.
   
2. **Loading Assets:**
   You can load Addressables using their key (address) either synchronously or asynchronously.

3. **Memory Management:**
   Addressables automatically manage memory and cache assets intelligently, unloading assets when they're no longer in use.

---

## Getting Started with Addressables

### Step 1: Installing the Addressables Package

1. Open Unity and go to **Window > Package Manager**.
2. Search for **Addressables** and install it.

### Step 2: Marking Assets as Addressable

1. Select the asset you want to make addressable (e.g., a prefab or texture).
2. In the Inspector, check the **Addressable** box. This will assign the asset a unique address (key) that you can modify if needed.

### Step 3: Loading Addressables

Here’s a simple example of how to load an Addressable asset asynchronously in C#:

```csharp
using UnityEngine;
using UnityEngine.AddressableAssets;
using UnityEngine.ResourceManagement.AsyncOperations;

public class AddressableLoader : MonoBehaviour
{
    public string addressKey;

    void Start()
    {
        Addressables.LoadAssetAsync<GameObject>(addressKey).Completed += OnAssetLoaded;
    }

    private void OnAssetLoaded(AsyncOperationHandle<GameObject> obj)
    {
        if (obj.Status == AsyncOperationStatus.Succeeded)
        {
            GameObject loadedPrefab = obj.Result;
            Instantiate(loadedPrefab, Vector3.zero, Quaternion.identity);
        }
        else
        {
            Debug.LogError("Failed to load Addressable asset.");
        }
    }
}
```

In this script:
- `addressKey` is the unique identifier for the asset.
- The `LoadAssetAsync` method loads the asset asynchronously, and once the load is complete, it’s instantiated in the scene.

### Step 4: Releasing Assets

It’s important to release assets when they are no longer needed to prevent memory leaks. Here's how to release an asset after using it:

```csharp
Addressables.Release(obj);
```

---

## Using Remote Content with Addressables

One of the strengths of the Addressable Asset System is its ability to host and download content remotely. You can store assets on a server and load them dynamically, reducing the initial download size of your game or app.

### Steps to Enable Remote Content:

1. **Create a Remote Group:**
   In the Addressables Groups window, create a new group and set its **Build Path** and **Load Path** to a remote server (e.g., an Amazon S3 bucket).
   
2. **Build the Content:**
   After setting up the group, you’ll need to build the Addressables content. Go to **Window > Asset Management > Addressables > Groups**, and click **Build > New Build > Default Build Script**.

3. **Upload the Content:**
   Upload the built asset bundles to your server, and your game will be able to download them dynamically as needed.

---

## Common Pitfalls and Tips

1. **Memory Leaks:**
   Be sure to release assets after they’re no longer needed using `Addressables.Release` to avoid memory issues.

2. **Profiling & Performance:**
   Profiling your game’s memory usage is crucial when using Addressables. Use Unity’s built-in profiler or third-party tools to track and optimize performance.

3. **Content Updates:**
   If you plan to update content remotely, ensure you’ve configured the **Content Catalog** correctly. Unity uses this catalog to find assets, and any changes to it will affect asset loading.

---

## Conclusion

Unity’s Addressable Asset System simplifies asset management, allowing you to load assets efficiently and update content dynamically. Whether you’re managing a small indie project or a large-scale game, Addressables offer the flexibility and performance you need.

By using Addressables, you can streamline asset loading, improve performance, and create dynamic content pipelines that scale with your game.

---

## Further Reading

- [Unity Addressables Documentation](https://docs.unity3d.com/Packages/com.unity.addressables@1.16/manual/index.html)
- [Unity Addressables API Reference](https://docs.unity3d.com/Packages/com.unity.addressables@1.16/api/UnityEngine.AddressableAssets.Addressables.html)
- [Unity Learn: Addressables](https://learn.unity.com/course/addressables)

![sampiyonCimbom](image.png)